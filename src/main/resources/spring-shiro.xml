<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!-- 1、 配置 Shiro 的 SecurityManager Bean. -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- 多 realm-->
        <property name="authenticator" ref="authenticator"></property>
        <!-- 多realm,认证方式 -->
        <property name="realms">
            <list>
                <ref bean="mysqlRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>

        <!--配置 记住我-->
        <property name="rememberMeManager" ref="rememberMeManager"></property>

        <property name="sessionManager" ref="sessionManager"></property>
    </bean>

    <!-- 2、 配置缓存管理器 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- 指定 ehcache 的配置文件 -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>

    <!-- 3、 配置进行授权和认证的 Realm -->
    <bean id="authenticator"
          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <!-- 认证策略 AtLeastOneSuccessfulStrategy、AllSuccessfulStrategy、FirstSuccessfulStrategy等-->
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>

    </bean>

    <bean id="mysqlRealm" class="com.cqut.financial.ssm.realm.MysqlRealm">
        <!-- 指定加密算法 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="512"></property>
            </bean>
        </property>
    </bean>

    <bean id="secondRealm" class="com.cqut.financial.ssm.realm.SecenedRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <property name="hashIterations" value="512"></property>
            </bean>
        </property>
    </bean>

    <!-- 4、 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. -->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 5、 启用ioc容器中shiro的注解，但必须在配置了lifecycleBeanPostProcessor之后才可以使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor" />
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!-- ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
    <!--
        6、 启用shrio授权注解拦截方式
         id必须和web.xml里面的过滤器名称一样
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 装配 securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登陆页面 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 登陆成功后的一面 -->
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!--
            具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.
            anon 可以被匿名访问
            authc 必须认证（登录）后才有可能访问的页面
            logout 登出
            roles角色过滤器
        -->


        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        <!--<property name="filterChainDefinitions">-->
        <!--<value>-->
        <!--&lt;!&ndash; url = 拦截器参数 &ndash;&gt;-->
        <!--/login.jsp = anon-->
        <!--/financial/login = anon-->
        <!--/financial/logout = logout-->

        <!--/user.jsp = roles[user]-->
        <!--/admin.jsp = roles[admin]-->

        <!--# everything else requires authentication:-->
        <!--/** = authc-->
        <!--</value>-->
        <!--</property>-->
    </bean>
    <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式,来配置拦截器，就是 /login.jsp = anon 这些 -->
    <bean id="filterChainDefinitionMap"
          factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>

    <bean id="filterChainDefinitionMapBuilder"
          class="com.cqut.financial.ssm.factory.FilterChainDefinitionMapBuilder"></bean>
    <!-- ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd -->
    <!--<bean id="shiroService" class="ShiroService" />-->

    <!--6、 sessionManager-->
    <!-- Session ID 生成器-->
    <bean id="sessionIdGenerator"
          class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话管理器-->

    <!--这里一定要用org.apache.shiro.web.session.mgt.DefaultWebSessionManager-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- session的失效时长30分钟，单位毫秒 1800000-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话  是清除缓存，不是清除数据库里面的 -->
        <!--检测扫描信息间隔一小时-->
        <property name="sessionValidationInterval" value="3000" />
        <!--开启扫描-->
        <property name="sessionValidationSchedulerEnabled" value="true"/>

        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

     <!--Session DAO. 继承 EnterpriseCacheSessionDAO-->
    <bean id="sessionDAO"
    class="com.cqut.financial.ssm.dao.MySessionDao">
        <!--session的缓存-->
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!--7、 rememberMe管理器  记住账户，客户端保留cookies，从而不需要验证登录-->
    <bean id="rememberMeManager"
          class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="
			#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="2592000"/><!-- 30天-->
        <!--<property name="maxAge" value="100000"/>-->
    </bean>

</beans>